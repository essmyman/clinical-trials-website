adefirr$DTHFL = as.numeric(adefirr$DTHFL == "Y")
form = as.formula(paste0( "~ (", paste(data_info$Variable, collapse="+"), ")^2"))
mm = model.matrix(form, adefirr)
gfit = cv.glmnet(mm, adefirr$DTHFL, family="binomial")
plot(gfit)
lambda_ind = which(gfit$glmnet.fit$lambda == gfit$lambda.1se)
betas = gfit$glmnet.fit$beta[,lambda_ind]
betas = betas[betas > 0]
selected_model = paste("DTHFL ~", paste(names(betas), collapse="+"))
selected_model = gsub(":", "__", selected_model)
new_data = as.data.frame(mm[,names(betas)])
new_data$DTHFL = adefirr$DTHFL
names(new_data) = gsub(":", "__", names(new_data))
glm_fit = glm(as.formula(selected_model), data=new_data, family=binomial)
summary(glm_fit)
Predictions = as.numeric(predict(gfit$glmnet.fit, mm, type="class")[,lambda_ind])
Actual = adefirr$DTHFL
tab = table(Predictions, Actual)
colnames(tab) = c("0", "1")
tab/sum(tab)
library(randomForest)
#rf_fit = randomForest(adefirr[,data_info$Variable], factor(adefirr$DTHFL))
rf_fit = randomForest(mm, factor(adefirr$DTHFL))
imp = importance(rf_fit)
imp = imp[order(imp[,1], decreasing=TRUE),,drop=FALSE]
imp[1:10,,drop=FALSE]
Predictions = predict(rf_fit, mm)
tab = table(Predictions, Actual)
colnames(tab) = c("0", "1")
tab/sum(tab)
rvcv = rfcv(mm, factor(adefirr$DTHFL), cv.fold=10)
table(adefirr$T790MLC)
table(adefirr$T790MLC, adefirr$RACE)
table(adefirr$T790MLC, adefirr$PARAMCD)
names(adefirr)
table(adefirr$SRCSEQ)
table(adefirr$SRCVAR)
adorirr = clean_data(read.sas7bdat(file.path(data_path, "adorirr.sas7bdat")))
names(adorirr)
names(adefirr)
table(adorirr$RSSTRESC)
table(adorirr$EVENTDESC)
table(adorirr$ANL01FL)
lapply(adorirr, table)
dim(adorirr)
table(adoirr$AVAL)
table(adoirr$AVALC)
table(adorirr$AVALC)
head(adorirr)
sum(duplicated(adorirr$SUBJID))
knitr::opts_chunk$set(echo = TRUE)
library(sas7bdat, quietly=TRUE)
library(glmnet, quietly=TRUE)
library(tidyverse, quietly=TRUE)
library(modelr, quietly=TRUE)
data_path = "~/Box Sync/Clovis/Tiger-X Data/CO1686-008_ADaM_2016-04-27"
# Patient-level response data clean-up
plr = as_tibble(read.sas7bdat(file.path(data_path, "adorirr.sas7bdat")))
plr$SUBJID = plr$SUBJID %>% as.integer
plr$TRT01PN = plr$TRT01P %>% as.numeric %>% as.factor
plr$TR01PG1N = plr$TR01PG1 %>% as.numeric %>% as.factor
plr$TRT01AN = plr$TRT01A %>% as.numeric %>% as.factor
plr$TR01AG1N = plr$TR01AG1 %>% as.numeric %>% as.factor
plr$TRTDUR = plr$TRTEDT - plr$TRTSDT
plr$AGEGR2N = plr$AGEGR2N %>% as.factor
plr$RACEN = plr$RACE %>% as.numeric %>% as.factor
plr$T790MLCN = plr$T790MLC %>% as.numeric %>% as.factor
plr$T790MCENP = plr$T790MCEN %>% as.numeric %>% as.factor
plr$HXHGFLN = plr$HXHGFL %>% as.numeric %>% as.factor
plr$ANL01FLN = plr$ANL01FL %>% as.numeric %>% as.factor
plr$ANL02FLN = plr$ANL02FL %>% as.numeric %>% as.factor
plr$AVALC = plr$AVALC %>% as.character
plr$study_end_date = (plr$TRTEDT == max(plr$TRTEDT)) %>% as.integer
regressor_vars = c("SITEID", "TR01AG1N", "TR01PG1N", "TRT01AN",
"TRTSDT", "TRTDUR", "TRTEDT", "AGEGR2N", "SEX", "RACEN", "T790MLCN",
"T790MCENP", "study_end_date")
cols = c("SUBJID", "SITEID", "TR01AG1N", "TR01PG1N", "TRT01AN",
"TRTSDT", "TRTDUR", "TRTEDT", "AGEGR2N", "SEX", "RACEN", "T790MLCN",
"T790MCENP", "study_end_date", "RSSTRESC", "AVAL", "AVALC", "ANL01FLN",
"ANL02FLN")
best_response = function(x) {
ind = which(x$ANL01FLN == 2)
if (length(ind) > 0) x$AVALC[ind] else NA
}
first_response_visit = function(x) {
ind = which(x$ANL02FLN == 2)
if (length(ind) > 0) ind[1] else NA
}
prog_regressor_vars = function(x) {
x[1,regressor_vars]
}
by_subject = plr[,cols] %>% group_by(SUBJID) %>% nest %>%
mutate(num_visits=map_int(data, nrow)) %>%
mutate(start_date=map_int(data, function(x) as.integer(x$TRTSDT[1]))) %>%
mutate(best_resp=map_chr(data, best_response)) %>%
mutate(first_resp=map_int(data, first_response_visit)) %>%
mutate(resp=map_int(best_resp, function(x) {x == "CR" | x == "PR"}))
by_subject = by_subject %>%
bind_cols(by_subject$data %>% map_df(prog_regressor_vars))
by_subject$respf = "Responder"
by_subject$respf[by_subject$resp == 0] = "Non-Responder"
by_subject$respf = by_subject$respf %>% as.factor
ggplot(by_subject, aes(x=start_date, fill=respf)) +
geom_histogram(binwidth=20) + ylab("Count") + xlab("Start Date") +
guides(fill=guide_legend(title="Outcome"))
resp_density = density(by_subject$start_date[by_subject$resp == 1],
from=min(by_subject$start_date), to=max(by_subject$start_date))
rd = data.frame(list(start_date=resp_density$x, Density=resp_density$y,
Outcome="Response"))
non_resp_density = density(by_subject$start_date[by_subject$resp == 0],
from=min(by_subject$start_date), to=max(by_subject$start_date))
nrd = data.frame(list(start_date=non_resp_density$x,
Density=non_resp_density$y, Outcome="Non-Response"))
marg = rbind(rd, nrd)
ggplot(marg, aes(x=start_date, y=Density, color=Outcome, group=Outcome)) +
geom_line() + xlab("Start Date") + ylab("Marginal Density")
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(10)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
plot(cv_fit)
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta1se = cv_fit$glmnet.fit$beta[,which_lambda]
print(beta1se[beta1se > 0])
beta1se = beta1se[beta1se > 0]
as_glm_fit = function(x) {class(x) = c(x$class, c("glm", "lm")); x}
glm.fit(as.matrix(mm[,c("(Intercept)", names(beta1se))]), by_subject$resp,
family=binomial()) %>% as_glm_fit %>% summary %>% print
# Probaby the best model.
by_subject$is_site_15 = (by_subject$SITEID == "15") %>% as.numeric
glm(resp ~ num_visits*TRTDUR+is_site_15, family=binomial, data=by_subject) %>%
summary %>% print
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(1)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
plot(cv_fit)
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta1se = cv_fit$glmnet.fit$beta[,which_lambda]
print(beta1se[beta1se > 0])
beta1se = beta1se[beta1se > 0]
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(100)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
cv_fit %>% plot
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta1se = cv_fit$glmnet.fit$beta[,which_lambda]
beta1se[beta1se > 0]
beta1se = beta1se[beta1se > 0]
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(110)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
cv_fit %>% plot
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta1se = cv_fit$glmnet.fit$beta[,which_lambda]
beta1se[beta1se > 0]
beta1se = beta1se[beta1se > 0]
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(100)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
cv_fit %>% plot
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta_lasso = cv_fit$glmnet.fit$beta[,which_lambda]
beta_lasso = beta1se[beta1se > 0]
beta_lasso %>% print
as_glm_fit = function(x) {class(x) = c(x$class, c("glm", "lm")); x}
glm.fit(as.matrix(mm[,c("(Intercept)", names(beta1se))]), by_subject$resp,
family=binomial()) %>% as_glm_fit %>% summary %>% print
# Probaby the best model.
by_subject$is_site_15 = (by_subject$SITEID == "15") %>% as.numeric
glm(resp ~ num_visits*TRTDUR+is_site_15, family=binomial, data=by_subject) %>%
summary %>% print
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(100)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
cv_fit %>% plot
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta_lasso = cv_fit$glmnet.fit$beta[,which_lambda]
beta_lasso = beta_lasso[beta_lasso > 0]
beta_lasso %>% print
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(200)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
cv_fit %>% plot
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta_lasso = cv_fit$glmnet.fit$beta[,which_lambda]
beta_lasso = beta_lasso[beta_lasso > 0]
beta_lasso %>% print
as_glm_fit = function(x) {class(x) = c(x$class, c("glm", "lm")); x}
glm.fit(as.matrix(mm[,c("(Intercept)", names(beta1se))]), by_subject$resp,
family=binomial()) %>% as_glm_fit %>% summary %>% print
# Probaby the best model.
by_subject$is_site_15 = (by_subject$SITEID == "15") %>% as.numeric
glm(resp ~ num_visits*TRTDUR+is_site_15, family=binomial, data=by_subject) %>%
summary %>% print
as_glm_fit = function(x) {class(x) = c(x$class, c("glm", "lm")); x}
glm.fit(as.matrix(mm[,c("(Intercept)", names(beta1se))]), by_subject$resp,
family=binomial()) %>% as_glm_fit %>% summary %>% print
# Probaby the best model.
by_subject$is_site_15 = (by_subject$SITEID == "15") %>% as.numeric
glm(resp ~ num_visits*TRTDUR+is_site_15, family=binomial, data=by_subject) %>%
summary %>% print
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(300)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
cv_fit %>% plot
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta_lasso = cv_fit$glmnet.fit$beta[,which_lambda]
beta_lasso = beta_lasso[beta_lasso > 0]
beta_lasso %>% print
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(3)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
cv_fit %>% plot
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta_lasso = cv_fit$glmnet.fit$beta[,which_lambda]
beta_lasso = beta_lasso[beta_lasso > 0]
beta_lasso %>% print
regressor_vars = c(regressor_vars, "num_visits")
form = as.formula(paste("~", paste(regressor_vars, collapse="+")))
#form = as.formula(paste("~", "(", paste(regressor_vars, collapse="+"),
#  ")^2 - 1"))
mm = model_matrix(by_subject, form, contrasts="contr.sum")
set.seed(33)
cv_fit = cv.glmnet(as.matrix(mm[,-1]), by_subject$resp, family="binomial")
cv_fit %>% plot
which_lambda = which(cv_fit$lambda == cv_fit$lambda.min)
beta_lasso = cv_fit$glmnet.fit$beta[,which_lambda]
beta_lasso = beta_lasso[beta_lasso > 0]
beta_lasso %>% print
library(ccex)
library(threejs)
pd = prices()
head(pd$result)
eg = pairs()$result %>% strsplit("-") %>% unlist %>% matrix(ncol=2)
eg
currency_pairs = pairs()
currency_pairs %>% strsplit("-") %>% unlist %>% matrix(ncol=2)
?strsplit
head(currency_pairs)
currency_pairs = pairs()$result
currency_graph = currency_pairs %>% strsplit("-") %>% unlist %>% matrix(ncol=2, byrow=TRUE)
currency_graph = currency_pairs %>% strsplit("-") %>% unlist %>% matrix(ncol=2, byrow=TRUE) %>%
%>% as.data.frame(stringsAsFactors=FALSE))
currency_graph = currency_pairs %>% strsplit("-") %>% unlist %>% matrix(ncol=2, byrow=TRUE) %>%
as.data.frame(stringsAsFactors=FALSE)) %>% graph_from_data_frame
currency_graph = currency_pairs %>% strsplit("-") %>% unlist %>% matrix(ncol=2, byrow=TRUE) %>%
as.data.frame(stringsAsFactors=FALSE) %>% graph_from_data_frame
graphjs(currency_graph)
graphjs(currency_graph, vertex.size=0.5)
graphjs(currency_graph, vertex.size=0.5)
graphjs(currency_graph, vertex.size=0.5, vertex.label=V(g)$name)
graphjs(currency_graph, vertex.size=0.5, vertex.label=V(currency_graph)$name)
graphjs(currency_graph, vertex.size=0.5, vertex.label=V(currency_graph)$name, edge.width=0.5)
graphjs(currency_graph, vertex.size=0.5, vertex.label=V(currency_graph)$name, edge.width=0.25)
library(ccex, quietly=TRUE)
library(threejs, quietly=TRUE)
library(tidyverse, quietly=TRUE)
library(igraph, quietly=TRUE)
currency_pairs = pairs()$result
currency_graph = currency_pairs %>% strsplit("-") %>% unlist %>% matrix(ncol=2, byrow=TRUE) %>%
as.data.frame(stringsAsFactors=FALSE) %>% graph_from_data_frame
graphjs(currency_graph, vertex.size=0.5, vertex.label=V(currency_graph)$name, edge.width=0.25)
library(quantmod)
usd_btc = getmarkethistory("usd-btc", 100)$result
usd_btc_xts = xts(usd_btc[c("price", "quantity")], order.by=usd_btc$time_stamp)
strptime(usd_btc$time_stamp)
library(ccex)
usd_btc = getmarkethistory("usd-btc", 100)$result
usd_btc = getmarkethistory("usd-btc", 100)$result
usd_btc_xts = usd_btc[c("price", "quantity")] %>% xts(order.by=usd_btc$time_stamp)
library(ccex, quietly=TRUE)
library(threejs, quietly=TRUE)
library(tidyverse, quietly=TRUE)
library(igraph, quietly=TRUE)
currency_pairs = pairs()$result
currency_graph = currency_pairs %>% strsplit("-") %>% unlist %>% matrix(ncol=2, byrow=TRUE) %>%
as.data.frame(stringsAsFactors=FALSE) %>% graph_from_data_frame
graphjs(currency_graph, vertex.size=0.5, vertex.label=V(currency_graph)$name, edge.width=0.25)
library(quantmod, quietly=TRUE)
# Get the recent history of the usd-btc market.
usd_btc = getmarkethistory("usd-btc", 100)$result
usd_btc_xts = usd_btc[c("price", "quantity")] %>% xts(order.by=usd_btc$time_stamp)
names(usd_btc_xts)
usd_btc_xts = usd_btc[c("price", "quantity")] %>% xts(order.by=usd_btc$time_stamp)
names(usd_btc_xts)[2] = "volume"
chartSeries(usd_btc_xts)
usd_btc = getmarkethistory("usd-btc", 100)$result %>% select(price, quantity) %>%
xts(order.by=usd_btc$time_stamp)
usd_btc = getmarkethistory("usd-btc", 100)$result %>% select(price, quantity) %>%
xts(order.by=usd_btc$time_stamp)
chartSeries(usd_btc_xts)
btc_usd = getmarkethistory("btc-usd", 100)$result %>% select(time_stamp, price, quantity) %>%
xts(order.by=(.)$time_stamp)
library(ccex, quietly=TRUE)
library(threejs, quietly=TRUE)
library(tidyverse, quietly=TRUE)
library(igraph, quietly=TRUE)
currency_pairs = pairs()$result
currency_graph = currency_pairs %>% strsplit("-") %>% unlist %>% matrix(ncol=2, byrow=TRUE) %>%
as.data.frame(stringsAsFactors=FALSE) %>% graph_from_data_frame
graphjs(currency_graph, vertex.size=0.5, vertex.label=V(currency_graph)$name, edge.width=0.25)
library(quantmod, quietly=TRUE)
# Get the recent history of the usd-btc market.
btc_usd = getmarkethistory("btc-usd", 100)$result %>% select(time_stamp, price, quantity) %>%
xts(order.by=(.)$time_stamp)
names(usd_btc_xts)[2] = "volume"
library(quantmod, quietly=TRUE)
# Get the recent history of the usd-btc market.
btc_usd = getmarkethistory("btc-usd", 100)$result %>% select(time_stamp, price, quantity) %>%
xts(order.by=(.)$time_stamp)
names(usd_btc)[2] = "volume"
library(quantmod, quietly=TRUE)
# Get the recent history of the usd-btc market.
btc_usd = getmarkethistory("btc-usd", 100)$result %>% select(time_stamp, price, quantity) %>%
xts(order.by=(.)$time_stamp)
names(btc_usd)[2] = "volume"
chartSeries(btc_usd)
btc_usd = getmarkethistory("btc-usd", 100)$result %>%
xts(order.by=(.)$time_stamp)[,c("price", "quantity")]
btc_usd = getmarkethistory("btc-usd", 100)$result %>%
xts((.)[,c("price", "quantity")], order.by=(.)$time_stamp)
names(btc_usd)[2] = "volume"
chartSeries(btc_usd)
head(btc_usd)
btc_usd = getmarkethistory("btc-usd", 100)$result %>%
xts((.)[,c("price", "quantity")], order.by=(.)$time_stamp)
head(btc_usd)
btc_usd = getmarkethistory("btc-usd", 100)$result %>%
xts(., order.by=(.)$time_stamp)
head(btc_usd)
btc_usd = btc_usd_df$result %>% select(price, quantity) %>% xts(order.by=btc_usd_df$time_stamp)
btc_usd_df = getmarkethistory("btc-usd", 100)
btc_usd_df = getmarkethistory("btc-usd", 100)$result
names(btc_usd)[2] = "volume"
chartSeries(btc_usd)
head(btc_usd)
btc_usd_df %>% select(price, quantity)
btc_usd_df %>% select(price, quantity) %>% head
btc_usd = btc_usd_df %>% select(price, quantity) %>% xts(order.by=btc_usd_df$time_stamp)
btc_usd %>% head
names(btc_usd)[2] = "volume"
chartSeries(btc_usd)
usd_btc_ob = getorderbook("btc-usd")$result
head(usd_btc_ob)
usd_btc_r = getorderbook("btc-usd")$result
usd_btc = getorderbook("btc-usd")$result
head(usd_btc_req)
usd_btc_req = getorderbook("btc-usd")$result
head(usd_btc_req)
library(scales)
library(ggplot2)
usd_btc_req = getorderbook("btc-usd")$result
usd_btc = bind_rows(usd_btc_req)
ggplot(doge_btc, aes(x=time_stamp, y=price, group=order_type,
color=order_type)) + geom_line() +
scale_x_datetime(breaks=date_breaks("hours"),
labels=date_format("%m-%d %H:%M")) + xlab("Date and Time") +
ylab("Price") + scale_colour_discrete(name="Order Type")
btc_usd_req = getorderbook("btc-usd")$result
btc_usd = bind_rows(btc_usd)
btc_usd_req
setwd("~/projects/ct2stage/inst/pcori-page")
btc_usd_req$buy$type = "buy"
btc_usd_req$sell$type = "sell"
btc_usd = bind_rows(btc_usd_req$buy, btc_usd_req$sell)
btc_usd_req
head(btc_usd)
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type)) + geom_bar()
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type)) + geom_bar(stat="identity")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_colour_discrete(name="Order Type")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_colour_discrete(name="Order Type")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_colour_discrete(name="Order Type")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_colour_discrete(name="Order Type")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_fill_discrete(name="Order Type")
ggplot(btc_usd, aes(x=rate, y=quantity,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_fill_discrete(name="Order Type")
ggplot(btc_usd, aes(x=rate, y=quantity,
fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_fill_discrete(name="Order Type")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + guides(fill=guide_legend(title="Order Type""))
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + guides(fill=guide_legend(title="Order Type""))
ggplot(btc_usd, aes(x=rate, y=quantity, group=type,
color=type, fill=type)) + geom_bar(stat="identity") + xlab("Price") +
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") #+ guides(fill=guide_legend(title="Order Type""))
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + guides(fill=guide_legend(title="Order Type""))
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + labs(fill = "Dose (mg)")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_fill_discrete("")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + + theme(legend.title = "element_blank()""
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + theme(legend.title = "element_blank()")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + theme(legend.title = element_text("here"))
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + theme(legend.title = "here")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_colour_discrete(name = "Fancy Title")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_colour_discrete(name = "Fancy Title")
color=type,
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_colour_discrete(name = "Fancy Title")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_fill_discrete(name = "Fancy Title")
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_fill_discrete(name = "Order Type") +
scale_color_brewer(guide=FALSE)
ggplot(btc_usd, aes(x=rate, y=quantity, group=type, color=type, fill=type)) +
geom_bar(stat="identity") + xlab("Price") +
ylab("Order Size") + scale_fill_discrete(name = "Order Type") +
scale_color_discrete(guide=FALSE)
?library
# Create a function to load libraries quietly
shut_up = function(load_lib) {
suppressWarnings(suppressPackageStartupMessages(load_lib))
}
# Load the libraries quietly.
shut_up(library(ccex))
shut_up(library(threejs, quietly=TRUE, warn.conflicts=FALSE))
shut_up(library(tidyverse, quietly=TRUE, warn.conflicts=FALSE))
shut_up(library(igraph, quietly=TRUE, warn.conflicts=FALSE))
# Create a graph of the crypo-currency markets.
currency_pairs = pairs()$result
currency_graph = currency_pairs %>% strsplit("-") %>% unlist %>%
matrix(ncol=2, byrow=TRUE) %>% as.data.frame(stringsAsFactors=FALSE) %>%
graph_from_data_frame
graphjs(currency_graph, vertex.size=0.5, vertex.label=V(currency_graph)$name, edge.width=0.25)
